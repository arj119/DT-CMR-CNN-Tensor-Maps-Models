# -*- coding: utf-8 -*-
"""tf2train_unet_gen_pix_2_pix.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vwNCoSo2gUT-NLMoRrPTYspRddMZZL68

# Investigating Pix2pix To Produce DT Data From Undersampled Scans

## Mount drive folders containing dataset
"""

# Commented out IPython magic to ensure Python compatibility.
# from google.colab import drive

# drive.mount('/content/drive')
# %ls

# %%
from tensorflow.python.keras import optimizers
from tensorflow.python.keras import models
from tensorflow.python.keras import losses
from tensorflow.python.keras import layers
import tensorflow as tf
from tensorflow.python.keras import backend as K
from sklearn.model_selection import train_test_split
from sklearn import preprocessing
import pickle
import numpy as np
import pandas as pd
from datetime import datetime, date
import functools
import sys
import glob
import os
import time
# from IPython import get_ipython
import seaborn as sns
from matplotlib import pyplot as plt
from scipy import stats
# from IPython import display

# Commented out IPython magic to ensure Python compatibility.
os.chdir('./drive/My Drive/Colab Notebooks')
# %ls

"""## Hyperparameters"""

# DTI parameter to train (fa, ha, e2a, dt etc...)
dti_param = 'dt'
# the code is the input number of averages, lets start with 4
dataset_code = '4'

# set up image size and training parameters
IMG_WIDTH = 128
IMG_HEIGHT = 128
INPUT_CHANNELS = 13
OUTPUT_CHANNELS = 6
BUFFER_SIZE = 225
BATCH_SIZE = 64
EPOCHS = 400
SAVE_CYCLE = 100
SCALE_TARGET = 100

print('====================================================')
print('DTI parameter: ' + dti_param)
print('Dataset code: ' + dataset_code)

# cnn filename with date dti parameter and dataset code
date_time_str = "{:%Y_%m_%d_%H_%M_%S}".format(datetime.now())
# cnn_name_new = dti_param + '_' + dataset_code + \
#     '_u_net_weights_' + date_time_str + '.hdf5'
# current_dir = sys.path[0]

# fix the random seed
np.random.seed(1)

input_dir = 'input_data_' + dataset_code
output_dir = 'output_data_' + dti_param

# list of arrays
input_list = glob.glob(os.path.join(input_dir, '*.npz'))
input_list.sort()

list_outputs = glob.glob(os.path.join(output_dir, '*.npz'))
list_outputs.sort()

# split list of inputs and outputs in train, validate and test
train_inputs, val_inputs, train_outputs, val_outputs = \
    train_test_split(input_list, list_outputs,
                     test_size=0.2, random_state=42)

val_inputs, test_inputs, val_outputs, test_outputs = \
    train_test_split(val_inputs, val_outputs,
                     test_size=0.5, random_state=42)

num_train_examples = len(train_inputs)
num_val_examples = len(val_inputs)
num_test_examples = len(test_inputs)

print("Number of training examples: {}".format(num_train_examples))
print("Number of validation examples: {}".format(num_val_examples))
print("Number of test examples: {}".format(num_test_examples))
print('====================================================')

# save the test subject list in a csv file
d = {'Input': test_inputs, 'Output': test_outputs}
df = pd.DataFrame(d)
df.to_csv('test_subject_list_' + dti_param + '.csv', index=False)

"""## Data Exploration

### Utility Functions
"""


# Normalise array to range [-1,1]
def normalise_matrices(array):
    array = np.true_divide(array, 127.5) - 1
    return array


def scale_output(array):
    array = array * SCALE_TARGET
    return array


def load_data_into_array(name, input=True, normalise_input=True):
    array = np.load(name)
    array = array['arr_0']
    array = np.float32(array)
    if input:
        if normalise_input:
            array = normalise_matrices(array)
    else:
        array = scale_output(array)
    array = np.expand_dims(array, axis=0)
    return array


def data_info(data_arr, isOutput=False):
    data = data_arr.flatten()
    out = ""
    if isOutput:
        print("Output data from", dti_param)
    else:
        print("Input data from", dti_param)
    print('min', np.amin(data))
    print('max', np.amax(data))
    print('mean', np.mean(data))
    print()


"""## Visualising an Example"""

fig, (ax1, ax2, ax3) = plt.subplots(1, 3)
fig.set_figwidth(30)

example = load_data_into_array(train_inputs[0], normalise_input=False)
ax1.set_title("Original Data")
sns.distplot(example, ax=ax1)
data_info(example)

scaled = load_data_into_array(train_inputs[0], normalise_input=False)
scaled = np.true_divide(scaled - 127.5, 127.5)
ax2.set_title("Scaled Data")
sns.distplot(scaled, ax=ax2)
data_info(scaled)

import warnings

warnings.filterwarnings("ignore")

standardised = load_data_into_array(train_inputs[0])
ax3.set_title("Standardised Data")
sns.distplot(standardised, ax=ax3)
data_info(standardised)

plt.show()

"""## Data Preprocessing"""


# load numpy arrays
def load_npz_files(input_list, output_list, dti_param):
    ''' load input and output arrays from lists of npz files '''
    # loop through the list and stack arrays
    for idx, val in enumerate(input_list):
        if idx == 0:
            input_arrays = load_data_into_array(val)
        else:
            temp = load_data_into_array(val)
            input_arrays = np.concatenate((input_arrays, temp), axis=0)

    for idx, val in enumerate(output_list):
        if idx == 0:
            output_arrays = load_data_into_array(val, input=False)
        else:
            temp = load_data_into_array(val, input=False)
            output_arrays = np.concatenate((output_arrays, temp), axis=0)

    if OUTPUT_CHANNELS == 1:
        output_arrays = np.expand_dims(output_arrays, axis=-1)

    # check there is no nan or inf
    input_arrays = np.nan_to_num(input_arrays)
    output_arrays = np.nan_to_num(output_arrays)
    assert np.isnan(np.sum(input_arrays)) == False, 'input_array has nans'
    assert np.isnan(np.sum(output_arrays)) == False, 'output_arrays has nans'
    assert np.isinf(np.sum(input_arrays)) == False, 'input_array has infs'
    assert np.isinf(np.sum(output_arrays)) == False, 'output_arrays has infs'

    assert input_arrays.shape[0] == output_arrays.shape[0]
    return input_arrays, output_arrays


#  Data augmentation functions
def random_crop(img_in, img_out):
    #  stack images before rotation so that the rotation is the same
    stacked_image = tf.concat([img_in, img_out], axis=2)
    cropped_image = tf.image.random_crop(
        stacked_image, size=[IMG_HEIGHT, IMG_WIDTH, INPUT_CHANNELS + OUTPUT_CHANNELS])

    r_img_in = cropped_image[:, :, 0:INPUT_CHANNELS]
    r_img_out = cropped_image[:, :, INPUT_CHANNELS:]
    # if OUTPUT_CHANNELS == 1:
    #     r_img_out = tf.expand_dims(r_img_out, axis=2)

    return r_img_in, r_img_out


def augment(img_in, img_out):
    # Add 20 pixels padding
    add_n = 20
    img_in = tf.image.resize_with_crop_or_pad(
        img_in, IMG_HEIGHT + add_n, IMG_WIDTH + add_n)
    img_out = tf.image.resize_with_crop_or_pad(
        img_out, IMG_HEIGHT + add_n, IMG_WIDTH + add_n)
    img_in, img_out = random_crop(img_in, img_out)

    return img_in, img_out


# get the tensorflow train and validate datasets to tensorflow
def get_baseline_dataset(input_list, output_list):
    # read arrays
    input_arrays, output_arrays = load_npz_files(
        input_list, output_list, dti_param)

    dataset = tf.data.Dataset.from_tensor_slices((input_arrays, output_arrays))
    data_info(input_arrays, False)
    data_info(output_arrays, True)
    return dataset


# Training Dataset
print("Training Dataset")
train_ds = get_baseline_dataset(train_inputs, train_outputs)
train_ds = train_ds.map(augment,
                        num_parallel_calls=tf.data.experimental.AUTOTUNE)
train_ds = train_ds.shuffle(BUFFER_SIZE)
train_ds = train_ds.batch(BATCH_SIZE)
train_ds = train_ds.cache()

# Validation Dataset
print("Validation Dataset")
val_ds = get_baseline_dataset(val_inputs, val_outputs)
val_ds = val_ds.batch(BATCH_SIZE)

# Training Dataset
print("Test Dataset")
test_ds = get_baseline_dataset(test_inputs, test_outputs)
test_ds = test_ds.batch(BATCH_SIZE)

"""## Generator

* The architecture of generator is a modified U-Net.
* Each block in the encoder is (Conv -> Batchnorm -> Leaky ReLU)
* Each block in the decoder is (Transposed Conv -> Batchnorm -> Dropout(applied to the first 3 blocks) -> ReLU)
* There are skip connections between the encoder and decoder(as in U-Net).
"""


# %%
def downsample(filters, size, apply_batchnorm=True):
    initializer = tf.random_normal_initializer(0., 0.02)

    result = tf.keras.Sequential()
    result.add(
        tf.keras.layers.Conv2D(filters, size, strides=2, padding='same',
                               kernel_initializer=initializer, use_bias=False))

    if apply_batchnorm:
        result.add(tf.keras.layers.BatchNormalization())

    result.add(tf.keras.layers.LeakyReLU())

    return result


# %%
temp_array = np.load(input_list[0])
temp_array = temp_array['arr_0']
temp_array = tf.convert_to_tensor(temp_array, dtype=tf.float32)
down_model = downsample(INPUT_CHANNELS, 4)
down_result = down_model(tf.expand_dims(temp_array, 0))
print(down_result.shape)


# %%
def upsample(filters, size, apply_dropout=False):
    initializer = tf.random_normal_initializer(0., 0.02)

    result = tf.keras.Sequential()
    result.add(
        tf.keras.layers.Conv2DTranspose(filters, size, strides=2,
                                        padding='same',
                                        kernel_initializer=initializer,
                                        use_bias=False))

    result.add(tf.keras.layers.BatchNormalization())

    if apply_dropout:
        result.add(tf.keras.layers.Dropout(0.5))

    result.add(tf.keras.layers.ReLU())

    return result


# %%
up_model = upsample(13, 4)
up_result = up_model(down_result)
print(up_result.shape)


# %%
def Generator():
    inputs = tf.keras.layers.Input(
        shape=[IMG_HEIGHT, IMG_WIDTH, INPUT_CHANNELS])

    down_stack = [
        downsample(64, 4, apply_batchnorm=False),  # (bs, 64, 64, 64)
        downsample(128, 4),  # (bs, 32, 32, 128)
        downsample(256, 4),  # (bs, 16, 16, 256)
        downsample(512, 4),  # (bs, 8, 8, 512)
        downsample(512, 4),  # (bs, 4, 4, 512)
        downsample(512, 4),  # (bs, 2, 2, 512)
        downsample(512, 4),  # (bs, 1, 1, 512)
    ]

    up_stack = [
        upsample(512, 4, apply_dropout=True),  # (bs, 2, 2, 1024)
        upsample(512, 4, apply_dropout=True),  # (bs, 4, 4, 1024)
        upsample(512, 4, apply_dropout=True),  # (bs, 8, 8, 1024)
        upsample(512, 4),  # (bs, 16, 16, 1024)
        upsample(256, 4),  # (bs, 32, 32, 512)
        upsample(128, 4),  # (bs, 64, 64, 256)
        upsample(64, 4),  # (bs, 128, 128, 128)
    ]

    # I changed the activation from tanh to linear - Trying relu
    initializer = tf.random_normal_initializer(0., 0.02)
    # leaky_relu = tf.keras.activations.relu(x, alpha = 0.1)
    last = tf.keras.layers.Conv2DTranspose(OUTPUT_CHANNELS, 4,
                                           strides=2,
                                           padding='same',
                                           kernel_initializer=initializer,
                                           activation='tanh')

    x = inputs

    # Downsampling through the model
    skips = []
    for down in down_stack:
        x = down(x)
        skips.append(x)

    skips = reversed(skips[:-1])

    # Upsampling and establishing the skip connections
    for up, skip in zip(up_stack, skips):
        x = up(x)
        x = tf.keras.layers.Concatenate()([x, skip])

    x = last(x)

    return tf.keras.Model(inputs=inputs, outputs=x)


# %%
generator = Generator()
tf.keras.utils.plot_model(generator, show_shapes=True, dpi=128)

# %%
gen_output = generator(temp_array[tf.newaxis, ...], training=False)
plt.imshow(gen_output[0, :, :, 0])
plt.show()

"""### Generator Loss
* It is a sigmoid cross entropy loss of the generated images and an **array of ones**.
* The [paper](https://arxiv.org/abs/1611.07004) also includes L1 loss which is MAE (mean absolute error) between the generated image and the target image.
* This allows the generated image to become structurally similar to the target image.
* The formula to calculate the total generator loss = gan_loss + LAMBDA * l1_loss, where LAMBDA = 100. This value was decided by the authors of the [paper](https://arxiv.org/abs/1611.07004).
"""

# %%
LAMBDA = 100


def generator_loss(disc_generated_output, gen_output, target):
    gan_loss = loss_object(tf.ones_like(
        disc_generated_output), disc_generated_output)

    # mean absolute error
    l1_loss = tf.reduce_mean(tf.abs(target - gen_output))

    total_gen_loss = gan_loss + (LAMBDA * l1_loss)

    return total_gen_loss, gan_loss, l1_loss


"""## Discriminator
* The Discriminator is a PatchGAN.
* Each block in the discriminator is (Conv -> BatchNorm -> Leaky ReLU)
* The shape of the output after the last layer is (batch_size, 30, 30, 1)
* Each 30x30 patch of the output classifies a 70x70 portion of the input image (such an architecture is called a PatchGAN).
* Discriminator receives 2 inputs.
* Input image and the target image, which it should classify as real.
* Input image and the generated image (output of generator), which it should classify as fake.
* We concatenate these 2 inputs together in the code (`tf.concat([inp, tar], axis=-1)`)

### Build the Discriminator
"""


def Discriminator():
    initializer = tf.random_normal_initializer(0., 0.02)

    inp = tf.keras.layers.Input(
        shape=[IMG_HEIGHT, IMG_WIDTH, INPUT_CHANNELS], name='input_image')
    tar = tf.keras.layers.Input(
        shape=[IMG_HEIGHT, IMG_WIDTH, OUTPUT_CHANNELS], name='target_image')

    x = tf.keras.layers.concatenate([inp, tar])  # (bs, 256, 256, channels*2)

    down1 = downsample(64, 4, False)(x)  # (bs, 128, 128, 64)
    down2 = downsample(128, 4)(down1)  # (bs, 64, 64, 128)
    down3 = downsample(256, 4)(down2)  # (bs, 32, 32, 256)

    zero_pad1 = tf.keras.layers.ZeroPadding2D()(down3)  # (bs, 34, 34, 256)
    conv = tf.keras.layers.Conv2D(512, 4, strides=1,
                                  kernel_initializer=initializer,
                                  use_bias=False)(zero_pad1)  # (bs, 31, 31, 512)

    batchnorm1 = tf.keras.layers.BatchNormalization()(conv)

    leaky_relu = tf.keras.layers.LeakyReLU()(batchnorm1)

    zero_pad2 = tf.keras.layers.ZeroPadding2D()(leaky_relu)  # (bs, 33, 33, 512)

    last = tf.keras.layers.Conv2D(1, 4, strides=1,
                                  kernel_initializer=initializer)(zero_pad2)  # (bs, 30, 30, 1)

    return tf.keras.Model(inputs=[inp, tar], outputs=last)


# %%
discriminator = Discriminator()
tf.keras.utils.plot_model(discriminator, show_shapes=True, dpi=128)

# %%
disc_out = discriminator(
    [temp_array[tf.newaxis, ...], gen_output], training=False)
plt.imshow(disc_out[0, ..., -1], vmin=-20, vmax=20, cmap='RdBu_r')
plt.colorbar()
plt.show()

"""### Discriminator loss
* The discriminator loss function takes 2 inputs; **real images, generated images**
* real_loss is a sigmoid cross entropy loss of the **real images** and an **array of ones(since these are the real images)**
* generated_loss is a sigmoid cross entropy loss of the **generated images** and an **array of zeros(since these are the fake images)**
* Then the total_loss is the sum of real_loss and the generated_loss

"""

# %%
loss_object = tf.keras.losses.BinaryCrossentropy(from_logits=True)


# %%
def discriminator_loss(disc_real_output, disc_generated_output):
    real_loss = loss_object(tf.ones_like(disc_real_output), disc_real_output)

    generated_loss = loss_object(tf.zeros_like(
        disc_generated_output), disc_generated_output)

    total_disc_loss = real_loss + generated_loss

    return total_disc_loss


"""### The training procedure for the discriminator is shown below.
To learn more about the architecture and the hyperparameters you can refer the [paper](https://arxiv.org/abs/1611.07004).
![Discriminator Update Image](https://github.com/tensorflow/docs/blob/master/site/en/tutorials/generative/images/dis.png?raw=1)

## Define the Optimizers and Checkpoint-saver
"""

# %%
generator_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)
discriminator_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)

# %%
checkpoint_dir = './checkpoints/investigating_batch_size_UNet_4avg_64'
checkpoint_prefix = os.path.join(checkpoint_dir, "ckpt")
checkpoint = tf.train.Checkpoint(generator_optimizer=generator_optimizer,
                                 discriminator_optimizer=discriminator_optimizer,
                                 generator=generator,
                                 discriminator=discriminator)

manager = tf.train.CheckpointManager(checkpoint, checkpoint_dir, max_to_keep=1)

"""## Generate Images

Write a function to plot some images during training.

* We pass images from the test dataset to the generator.
* The generator will then translate the input image into the output.
* Last step is to plot the predictions and **voila!**

Note: The `training=True` is intentional here since
we want the batch statistics while running the model
on the test dataset. If we use training=False, we will get
the accumulated statistics learned from the training dataset (which we don't want)
"""


def denormalise_output(arr, mean, rng):
    return arr / SCALE_TARGET


def generate_images(model, test_input, tar, out_mean=0, out_range=1):
    prediction = model(test_input, training=True)
    plt.figure(figsize=(15, 15))
    target = denormalise_output(tar[0, :, :, 5], out_mean, out_range)
    prediction = denormalise_output(prediction[0, :, :, 5], out_mean, out_range)
    absDiff = abs(target - prediction)
    meanAbsDiff = np.mean(absDiff)
    medianAbsDiff = np.median(absDiff)
    meanRelativeDifference = abs(np.mean(target) - np.mean(prediction)) / np.mean(target) * 100
    display_list = [target, prediction, absDiff]

    title = ['Ground Truth', 'Predicted Image', 'Absolute Difference']

    fig = plt.figure(frameon=False)
    fig.set_size_inches(20, 20)

    for i in range(3):
        plt.subplot(1, 4, i + 1)
        # Get rid of white colour if not in dark mode
        plt.title(title[i], {'color': 'white'})
        im = plt.imshow(display_list[i])
        if title[i] != 'Input':
            plt.clim(0, 0.003)
        plt.colorbar(im, fraction=0.046, pad=0.04)
        plt.axis('off')
    plt.show()
    print("Mean absolute error: " + str(meanAbsDiff))
    print("Median absolute error: " + str(medianAbsDiff))
    print("Mean difference percentage error: " + str(meanRelativeDifference))


# %%
for (example_input, example_target) in val_ds.take(3):
    generate_images(generator, example_input, example_target)

"""## Training
* For each example input generate an output.
* The discriminator receives the input_image and the generated image as the first input. The second input is the input_image and the target_image.
* Next, we calculate the generator and the discriminator loss.
* Then, we calculate the gradients of loss with respect to both the generator and the discriminator variables(inputs) and apply those to the optimizer.
* Then log the losses to TensorBoard.
"""

# %%
log_dir = "logs/batch_size_investigation/"

summary_writer = tf.summary.create_file_writer(
    log_dir + "batch_size=" + str(BATCH_SIZE))


# %%
@tf.function
def train_step(input_image, target, epoch):
    with tf.GradientTape() as gen_tape, tf.GradientTape() as disc_tape:
        gen_output = generator(input_image, training=True)

        disc_real_output = discriminator([input_image, target], training=True)
        disc_generated_output = discriminator(
            [input_image, gen_output], training=True)

        gen_total_loss, gen_gan_loss, gen_l1_loss = generator_loss(
            disc_generated_output, gen_output, target)
        disc_loss = discriminator_loss(disc_real_output, disc_generated_output)

    generator_gradients = gen_tape.gradient(gen_total_loss,
                                            generator.trainable_variables)
    discriminator_gradients = disc_tape.gradient(disc_loss,
                                                 discriminator.trainable_variables)

    generator_optimizer.apply_gradients(zip(generator_gradients,
                                            generator.trainable_variables))
    discriminator_optimizer.apply_gradients(zip(discriminator_gradients,
                                                discriminator.trainable_variables))

    with summary_writer.as_default():
        tf.summary.scalar('gen_total_loss', gen_total_loss, step=epoch)
        tf.summary.scalar('gen_gan_loss', gen_gan_loss, step=epoch)
        tf.summary.scalar('gen_l1_loss', gen_l1_loss, step=epoch)
        tf.summary.scalar('disc_loss', disc_loss, step=epoch)


"""### The actual training loop:
* Iterates over the number of epochs.
* On each epoch it clears the display, and runs `generate_images` to show it's progress.
* On each epoch it iterates over the training dataset, printing a '.' for each example.
* It saves a checkpoint every 20 epochs.
"""


def fit(train_ds, epochs, test_ds):
    checkpoint.restore(manager.latest_checkpoint)
    if manager.latest_checkpoint:
        print("Restored from {}".format(manager.latest_checkpoint))
    else:
        print("Initializing from scratch.")

    for epoch in range(epochs):
        start = time.time()

        display.clear_output(wait=True)

        for (example_input, example_target) in val_ds.take(1):
            generate_images(generator, example_input, example_target)
        print("Epoch: ", epoch)

        # Train
        for n, (input_image, target) in train_ds.enumerate():
            print('.', end='')
            if (n + 1) % 100 == 0:
                print()
            train_step(input_image, target, epoch)
        print()

        # saving (checkpoint) the model every EPOCHS epochs
        if (epoch + 1) % SAVE_CYCLE == 0:
            save_path = manager.save()
            print("Saved checkpoint for epoch {}: {}".format(
                int(epoch), save_path))

        print('Time taken for epoch {} is {} sec\n'.format(epoch + 1,
                                                           time.time() - start))
    # checkpoint.save(file_prefix=checkpoint_prefix)


"""### Tensorboard viewer"""

# #docs_infra: no_execute
get_ipython().run_line_magic('load_ext', 'tensorboard')
get_ipython().run_line_magic('tensorboard', '--logdir {log_dir}')

# Commented out IPython magic to ensure Python compatibility.
# %reload_ext tensorboard

"""### Now run the training loop:

"""

fit(train_ds, 301, val_ds)

"""# Results"""

checkpoint.restore(manager.latest_checkpoint)
if manager.latest_checkpoint:
    print("Restored from {}".format(manager.latest_checkpoint))
else:
    print("Initializing from scratch.")

for (example_input, example_target) in test_ds.take(10):
    generate_images(generator, example_input, example_target)

"""![alt text](https://)"""

generator.save("./Arjun_generator_models/UNetGen3dirAverages/model_input_scaled.h5")
